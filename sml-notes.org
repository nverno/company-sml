#+TITLE: SML Notes

* Todo
** build ml-doc tool
+ trouble compiling with msys
+ maybe do doc gen on vagrant box?
+ outputs html, so does more than needed here
** capf
+ For basic types at least would be easy starting point.
** Inline type overlay
+ Find out how hard it is to do what cider does.
** Type inference
+ Just query compiler?
** ml-doc index files
+ functions for structures, if actual parsing is too hard
** Jump to basis function definitions
+ How does the Pervasive.sml fit in here?
+ Need to avoid jumping to local bindings
** TAGs file generation
+ Avoid local defs?
** Add completion to REPL
+ not really anything to do here
** Lookup docs
+ [[http://sml-family.org/Basis/manpages.html][Basis Manpages]]
** Fix company-keywords
+ should just autoload a hook to add keywords

* Implementation
+ Mostly in SML, C for OS/garbage/low-level stuffs
+ Core [[http://www.mpi-sws.org/~rossberg/sml.html][SML Grammar]]

* Types
** Basic types:
+ int, float, char, string

** Compound types:
+ tuples, records, lists, arrays

** New Types:
+ Can be defined and made abstract
+ Extend types with parametric polymorphism

* Basis Library
+ All compliant SML conform to basis lib
+ Module system
+ Latest version is documented [[http://standardml.org/Basis][online]]
* Autoloads
** Basis
- $smlnj/basis/basis.cm            : basis library
- $smlnj/basis/cm.cm               : compilation manager
- $smlnj/basis/smlnj-lib.cm        : util portion of SML/NJ library
** Additional Libs
- $smlnj/smlnj-lib/pp-lib.cm       : pretty-printing
- $smlnj/smlnj-lib/controls-lib.cm : configurable controls
- $smlnj/smlnj-lib/html-lib.cm     : HTML stuff
** Compiler libs
- $smlnj/compiler.cm               : Visible compiler (structures)
- $smlnj/compiler/compiler.cm      : old-style compiler stucture
- $smlnj/compiler/minimal.cm       : minimal replacement for above



* SML/NJ
~$smlnj~ Additional components

** Interactive Compiler
+ Interactive compiler for SML.
+ Toplevel loop to compile declarations/expressions entered by user.
** Additional Libraries
+ hash tables
+ dynamic arrays
+ search trees
+ sorting
+ regular expressions
+ HTML parsing
+ pretty printing

** Compilation Manager
+ Tracks dependencies b/w various modules make up a project.
+ Provides features like `make` and `makedepend`, but specialized to
  SML and automatically tracks dependencies between modules.

** Tools
*** ML-Lex
+ SML/NJ version of flex - generates lexical analysers from
  descriptions of tokens.
*** ML-Yacc
+ SML/NJ version of bison - generates descriptions of grammars.
*** ML-Burg
+ ?
*** ML-RISC
+ backend for code generation used by SML/NJ itself maybe

** CML
+ Library for concurrent programming.
+ Lightweight threads
+ First-class synchronous operations

** EXene
+ graphical interface toolkit for X-Windows implemented in CML

* Resources
+ [[http://www.smlnj.org/doc/literature.html#tutorials][Tutorials/Books]]
